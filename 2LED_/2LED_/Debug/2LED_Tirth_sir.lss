
2LED_Tirth_sir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004b6  0000054a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000579  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000587  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0a  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047b  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bc  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000342  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002a8  000002a8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.datx    00000046  0000017a  0000017a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ctrlx   00000046  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.daty    00000046  00000206  00000206  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ctrly   00000046  0000024c  0000024c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    000000ca  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .data.d       000001f8  00800060  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .data.dotControl 00000008  00800258  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.__dummy_fini 00000002  000002b0  000002b0  00000344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000002b2  000002b2  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000002b4  000002b4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000002ac  000002ac  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
   8:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
   c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  10:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  14:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  18:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  1c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  20:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  24:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  28:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  2c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  30:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  34:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  38:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  3c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  40:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  44:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  48:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  4c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>
  50:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	02 60       	ori	r16, 0x02	; 2
  58:	00 02       	muls	r16, r16
  5a:	b6 00       	.word	0x00b6	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 49 01 	jmp	0x292	; 0x292 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000002a8 <__bad_interrupt>:
 2a8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.datx:

0000017a <datx>:

#define dTime 0.1


void datx(unsigned char data){
	PORTC&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
 17a:	95 b3       	in	r25, 0x15	; 21
 17c:	97 7f       	andi	r25, 0xF7	; 247
 17e:	95 bb       	out	0x15, r25	; 21
	for(int i=0;i<8;i++){
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <datx+0x38>
		PORTC&=~(1<<0);//
 186:	95 b3       	in	r25, 0x15	; 21
 188:	9e 7f       	andi	r25, 0xFE	; 254
 18a:	95 bb       	out	0x15, r25	; 21
		if((data&0x80)!=0) PORTC|=(1<<1);
 18c:	88 23       	and	r24, r24
 18e:	24 f4       	brge	.+8      	; 0x198 <datx+0x1e>
 190:	95 b3       	in	r25, 0x15	; 21
 192:	92 60       	ori	r25, 0x02	; 2
 194:	95 bb       	out	0x15, r25	; 21
 196:	03 c0       	rjmp	.+6      	; 0x19e <datx+0x24>
		else PORTC&=~(1<<1);
 198:	95 b3       	in	r25, 0x15	; 21
 19a:	9d 7f       	andi	r25, 0xFD	; 253
 19c:	95 bb       	out	0x15, r25	; 21
		PORTC|=(1<<0);
 19e:	95 b3       	in	r25, 0x15	; 21
 1a0:	91 60       	ori	r25, 0x01	; 1
 1a2:	95 bb       	out	0x15, r25	; 21
		data<<=1;
 1a4:	88 0f       	add	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	9a 95       	dec	r25
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <datx+0x2e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <datx+0x34>
#define dTime 0.1


void datx(unsigned char data){
	PORTC&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
	for(int i=0;i<8;i++){
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	28 30       	cpi	r18, 0x08	; 8
 1b4:	31 05       	cpc	r19, r1
 1b6:	3c f3       	brlt	.-50     	; 0x186 <datx+0xc>
		else PORTC&=~(1<<1);
		PORTC|=(1<<0);
		data<<=1;
		_delay_us(1);
	}
	PORTC|=(1<<3);
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	08 95       	ret

Disassembly of section .text.ctrlx:

000001c0 <ctrlx>:
}

void ctrlx(unsigned char data){
	PORTD&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
 1c0:	92 b3       	in	r25, 0x12	; 18
 1c2:	97 7f       	andi	r25, 0xF7	; 247
 1c4:	92 bb       	out	0x12, r25	; 18
	for(int i=0;i<8;i++){
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	16 c0       	rjmp	.+44     	; 0x1f8 <ctrlx+0x38>
		PORTD&=~(1<<0);//
 1cc:	92 b3       	in	r25, 0x12	; 18
 1ce:	9e 7f       	andi	r25, 0xFE	; 254
 1d0:	92 bb       	out	0x12, r25	; 18
		if((data&0x80)!=0) PORTD|=(1<<1);
 1d2:	88 23       	and	r24, r24
 1d4:	24 f4       	brge	.+8      	; 0x1de <ctrlx+0x1e>
 1d6:	92 b3       	in	r25, 0x12	; 18
 1d8:	92 60       	ori	r25, 0x02	; 2
 1da:	92 bb       	out	0x12, r25	; 18
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <ctrlx+0x24>
		else PORTD&=~(1<<1);
 1de:	92 b3       	in	r25, 0x12	; 18
 1e0:	9d 7f       	andi	r25, 0xFD	; 253
 1e2:	92 bb       	out	0x12, r25	; 18
		PORTD|=(1<<0);
 1e4:	92 b3       	in	r25, 0x12	; 18
 1e6:	91 60       	ori	r25, 0x01	; 1
 1e8:	92 bb       	out	0x12, r25	; 18
		data<<=1;
 1ea:	88 0f       	add	r24, r24
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <ctrlx+0x2e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <ctrlx+0x34>
	PORTC|=(1<<3);
}

void ctrlx(unsigned char data){
	PORTD&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
	for(int i=0;i<8;i++){
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	28 30       	cpi	r18, 0x08	; 8
 1fa:	31 05       	cpc	r19, r1
 1fc:	3c f3       	brlt	.-50     	; 0x1cc <ctrlx+0xc>
		else PORTD&=~(1<<1);
		PORTD|=(1<<0);
		data<<=1;
		_delay_us(1);
	}
	PORTD|=(1<<3);
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	88 60       	ori	r24, 0x08	; 8
 202:	82 bb       	out	0x12, r24	; 18
 204:	08 95       	ret

Disassembly of section .text.daty:

00000206 <daty>:
}

void daty(unsigned char data){
	PORTA&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
 206:	9b b3       	in	r25, 0x1b	; 27
 208:	97 7f       	andi	r25, 0xF7	; 247
 20a:	9b bb       	out	0x1b, r25	; 27
	for(int i=0;i<8;i++){
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	16 c0       	rjmp	.+44     	; 0x23e <daty+0x38>
		PORTA&=~(1<<0);//
 212:	9b b3       	in	r25, 0x1b	; 27
 214:	9e 7f       	andi	r25, 0xFE	; 254
 216:	9b bb       	out	0x1b, r25	; 27
		if((data&0x80)!=0) PORTA|=(1<<1);
 218:	88 23       	and	r24, r24
 21a:	24 f4       	brge	.+8      	; 0x224 <daty+0x1e>
 21c:	9b b3       	in	r25, 0x1b	; 27
 21e:	92 60       	ori	r25, 0x02	; 2
 220:	9b bb       	out	0x1b, r25	; 27
 222:	03 c0       	rjmp	.+6      	; 0x22a <daty+0x24>
		else PORTA&=~(1<<1);
 224:	9b b3       	in	r25, 0x1b	; 27
 226:	9d 7f       	andi	r25, 0xFD	; 253
 228:	9b bb       	out	0x1b, r25	; 27
		PORTA|=(1<<0);
 22a:	9b b3       	in	r25, 0x1b	; 27
 22c:	91 60       	ori	r25, 0x01	; 1
 22e:	9b bb       	out	0x1b, r25	; 27
		data<<=1;
 230:	88 0f       	add	r24, r24
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <daty+0x2e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <daty+0x34>
	PORTD|=(1<<3);
}

void daty(unsigned char data){
	PORTA&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
	for(int i=0;i<8;i++){
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	28 30       	cpi	r18, 0x08	; 8
 240:	31 05       	cpc	r19, r1
 242:	3c f3       	brlt	.-50     	; 0x212 <daty+0xc>
		else PORTA&=~(1<<1);
		PORTA|=(1<<0);
		data<<=1;
		_delay_us(1);
	}
	PORTA|=(1<<3);
 244:	8b b3       	in	r24, 0x1b	; 27
 246:	88 60       	ori	r24, 0x08	; 8
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret

Disassembly of section .text.ctrly:

0000024c <ctrly>:
}

void ctrly(unsigned char data){
	PORTB&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	97 7f       	andi	r25, 0xF7	; 247
 250:	98 bb       	out	0x18, r25	; 24
	for(int i=0;i<8;i++){
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	16 c0       	rjmp	.+44     	; 0x284 <ctrly+0x38>
		PORTB&=~(1<<0);//
 258:	98 b3       	in	r25, 0x18	; 24
 25a:	9e 7f       	andi	r25, 0xFE	; 254
 25c:	98 bb       	out	0x18, r25	; 24
		if((data&0x80)!=0) PORTB|=(1<<1);
 25e:	88 23       	and	r24, r24
 260:	24 f4       	brge	.+8      	; 0x26a <ctrly+0x1e>
 262:	98 b3       	in	r25, 0x18	; 24
 264:	92 60       	ori	r25, 0x02	; 2
 266:	98 bb       	out	0x18, r25	; 24
 268:	03 c0       	rjmp	.+6      	; 0x270 <ctrly+0x24>
		else PORTB&=~(1<<1);
 26a:	98 b3       	in	r25, 0x18	; 24
 26c:	9d 7f       	andi	r25, 0xFD	; 253
 26e:	98 bb       	out	0x18, r25	; 24
		PORTB|=(1<<0);
 270:	98 b3       	in	r25, 0x18	; 24
 272:	91 60       	ori	r25, 0x01	; 1
 274:	98 bb       	out	0x18, r25	; 24
		data<<=1;
 276:	88 0f       	add	r24, r24
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	9a 95       	dec	r25
 27c:	f1 f7       	brne	.-4      	; 0x27a <ctrly+0x2e>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <ctrly+0x34>
	PORTA|=(1<<3);
}

void ctrly(unsigned char data){
	PORTB&=~(1<<3);//0b00000001 to 0b00001000 to 0b11110111 to 0b00000000&0b11110111
	for(int i=0;i<8;i++){
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	28 30       	cpi	r18, 0x08	; 8
 286:	31 05       	cpc	r19, r1
 288:	3c f3       	brlt	.-50     	; 0x258 <ctrly+0xc>
		else PORTB&=~(1<<1);
		PORTB|=(1<<0);
		data<<=1;
		_delay_us(1);
	}
	PORTB|=(1<<3);
 28a:	88 b3       	in	r24, 0x18	; 24
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	88 bb       	out	0x18, r24	; 24
 290:	08 95       	ret

Disassembly of section .text.main:

000000b0 <main>:
}

int main(void)
{
    DDRC=0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;//0b01111111
  b4:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF;
  b6:	87 bb       	out	0x17, r24	; 23
	DDRA=0xFF;
  b8:	8a bb       	out	0x1a, r24	; 26
	PORTB=0x00;
  ba:	18 ba       	out	0x18, r1	; 24
	PORTA=0x00;
  bc:	1b ba       	out	0x1b, r1	; 27
	PORTD=0x00;//0b10000000
  be:	12 ba       	out	0x12, r1	; 18
	PORTC=0X00;
  c0:	15 ba       	out	0x15, r1	; 21
	int n = 0;
	float i = 0;
		while (1)
		{
			i=i+1;
			for (int k = 0;k<62;k++){
  c2:	c1 2c       	mov	r12, r1
  c4:	d1 2c       	mov	r13, r1
  c6:	54 c0       	rjmp	.+168    	; 0x170 <main+0xc0>
				for (int i=0;i<512;i++)
				{
					ctrlx(~dotControl[j]);
  c8:	fe 01       	movw	r30, r28
  ca:	e8 5a       	subi	r30, 0xA8	; 168
  cc:	fd 4f       	sbci	r31, 0xFD	; 253
  ce:	80 81       	ld	r24, Z
  d0:	80 95       	com	r24
  d2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ctrlx>
					datx(d[k][j]);
  d6:	f6 01       	movw	r30, r12
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	80 81       	ld	r24, Z
  ee:	0e 94 bd 00 	call	0x17a	; 0x17a <datx>
					j = j +1;
  f2:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x48>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x4e>
  fe:	00 00       	nop
					_delay_ms(dTime);
					if (j>7){
 100:	c8 30       	cpi	r28, 0x08	; 8
 102:	d1 05       	cpc	r29, r1
 104:	14 f0       	brlt	.+4      	; 0x10a <main+0x5a>
						j = 0;
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
					}
					if (k>7)
 10a:	98 e0       	ldi	r25, 0x08	; 8
 10c:	c9 16       	cp	r12, r25
 10e:	d1 04       	cpc	r13, r1
 110:	ec f0       	brlt	.+58     	; 0x14c <main+0x9c>
					{
						m = k-8;
						ctrly(~dotControl[n]);
 112:	f8 01       	movw	r30, r16
 114:	e8 5a       	subi	r30, 0xA8	; 168
 116:	fd 4f       	sbci	r31, 0xFD	; 253
 118:	80 81       	ld	r24, Z
 11a:	80 95       	com	r24
 11c:	0e 94 26 01 	call	0x24c	; 0x24c <ctrly>
						daty(d[m][n]);
 120:	f6 01       	movw	r30, r12
 122:	38 97       	sbiw	r30, 0x08	; 8
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e0 5a       	subi	r30, 0xA0	; 160
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	e0 0f       	add	r30, r16
 136:	f1 1f       	adc	r31, r17
 138:	80 81       	ld	r24, Z
 13a:	0e 94 03 01 	call	0x206	; 0x206 <daty>
						n = n + 1;
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
						//_delay_ms(dTime);
						if (n>7){
 142:	08 30       	cpi	r16, 0x08	; 8
 144:	11 05       	cpc	r17, r1
 146:	14 f0       	brlt	.+4      	; 0x14c <main+0x9c>
							n = 0;
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	10 e0       	ldi	r17, 0x00	; 0
	float i = 0;
		while (1)
		{
			i=i+1;
			for (int k = 0;k<62;k++){
				for (int i=0;i<512;i++)
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	e8 1a       	sub	r14, r24
 150:	f8 0a       	sbc	r15, r24
 152:	06 c0       	rjmp	.+12     	; 0x160 <main+0xb0>
 154:	e1 2c       	mov	r14, r1
 156:	f1 2c       	mov	r15, r1
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	e1 14       	cp	r14, r1
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	f9 06       	cpc	r15, r25
 166:	0c f4       	brge	.+2      	; 0x16a <main+0xba>
 168:	af cf       	rjmp	.-162    	; 0xc8 <main+0x18>
	int n = 0;
	float i = 0;
		while (1)
		{
			i=i+1;
			for (int k = 0;k<62;k++){
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	c8 1a       	sub	r12, r24
 16e:	d8 0a       	sbc	r13, r24
 170:	9e e3       	ldi	r25, 0x3E	; 62
 172:	c9 16       	cp	r12, r25
 174:	d1 04       	cpc	r13, r1
 176:	74 f3       	brlt	.-36     	; 0x154 <main+0xa4>
 178:	a4 cf       	rjmp	.-184    	; 0xc2 <main+0x12>

Disassembly of section .text.__dummy_fini:

000002b0 <_fini>:
 2b0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002b2 <__funcs_on_exit>:
 2b2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002b4 <__simulator_exit>:
 2b4:	08 95       	ret

Disassembly of section .text.exit:

00000292 <exit>:
 292:	ec 01       	movw	r28, r24
 294:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__funcs_on_exit>
 298:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_fini>
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__simulator_exit>
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Exit>

Disassembly of section .text._Exit:

000002ac <_Exit>:
 2ac:	0e 94 56 00 	call	0xac	; 0xac <_exit>
