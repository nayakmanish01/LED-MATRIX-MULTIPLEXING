
moving_character.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000322  000003b6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f4  00000000  00000000  00000413  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ea  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000255  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bc  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000121  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000185d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000017c  0000017c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       00000198  00800060  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    000000b6  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000184  00000184  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000186  00000186  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000188  00000188  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000166  00000166  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  00000180  00000180  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
   8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
   c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	01 f8       	bld	r0, 1
  58:	00 01       	movw	r0, r0
  5a:	8a 00       	.word	0x008a	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 b3 00 	jmp	0x166	; 0x166 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

0000017c <__bad_interrupt>:
 17c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000b0 <main>:
 */ 
#define F_CPU 16000000UL
#include <xc.h>
#include<util/delay.h>
int main(void)
{  DDRB=0xff;
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	c8 59       	subi	r28, 0x98	; 152
  ba:	d1 40       	sbci	r29, 0x01	; 1
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 bb       	out	0x17, r24	; 23
   DDRD=0xff;
  ca:	81 bb       	out	0x11, r24	; 17
   char character[][8]={{
  cc:	88 e8       	ldi	r24, 0x88	; 136
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	e0 e6       	ldi	r30, 0x60	; 96
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x28>
                      0b00000000,
                      0b00000000,
                      0b00000000
                      }
					  };
   int row[8]={1,2,4,8,16,32,64,128};
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	e8 ee       	ldi	r30, 0xE8	; 232
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	a7 57       	subi	r26, 0x77	; 119
  ea:	be 4f       	sbci	r27, 0xFE	; 254
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	8a 95       	dec	r24
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x3c>
    while(1)
    {
         for (int k=0;k<50;k++)
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	32 c0       	rjmp	.+100    	; 0x15e <main+0xae>
         {for (int i=0;i<8;i++)
         {PORTD=row[i];
  fa:	fc 01       	movw	r30, r24
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	29 e8       	ldi	r18, 0x89	; 137
 102:	31 e0       	ldi	r19, 0x01	; 1
 104:	2c 0f       	add	r18, r28
 106:	3d 1f       	adc	r19, r29
 108:	e2 0f       	add	r30, r18
 10a:	f3 1f       	adc	r31, r19
 10c:	20 81       	ld	r18, Z
 10e:	22 bb       	out	0x12, r18	; 18
	      PORTB=~character[k][i];
 110:	fa 01       	movw	r30, r20
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	2c 0f       	add	r18, r28
 124:	3d 1f       	adc	r19, r29
 126:	e2 0f       	add	r30, r18
 128:	f3 1f       	adc	r31, r19
 12a:	e8 0f       	add	r30, r24
 12c:	f9 1f       	adc	r31, r25
 12e:	20 81       	ld	r18, Z
 130:	20 95       	com	r18
 132:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	eb e2       	ldi	r30, 0x2B	; 43
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x88>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x8e>
 13e:	00 00       	nop
					  };
   int row[8]={1,2,4,8,16,32,64,128};
    while(1)
    {
         for (int k=0;k<50;k++)
         {for (int i=0;i<8;i++)
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x98>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	91 05       	cpc	r25, r1
 14c:	b4 f2       	brlt	.-84     	; 0xfa <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	9c e7       	ldi	r25, 0x7C	; 124
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xa2>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xa8>
 158:	00 00       	nop
                      }
					  };
   int row[8]={1,2,4,8,16,32,64,128};
    while(1)
    {
         for (int k=0;k<50;k++)
 15a:	4f 5f       	subi	r20, 0xFF	; 255
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	42 33       	cpi	r20, 0x32	; 50
 160:	51 05       	cpc	r21, r1
 162:	84 f3       	brlt	.-32     	; 0x144 <main+0x94>
 164:	c7 cf       	rjmp	.-114    	; 0xf4 <main+0x44>

Disassembly of section .text.__dummy_fini:

00000184 <_fini>:
 184:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000186 <__funcs_on_exit>:
 186:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000188 <__simulator_exit>:
 188:	08 95       	ret

Disassembly of section .text.exit:

00000166 <exit>:
 166:	ec 01       	movw	r28, r24
 168:	0e 94 c3 00 	call	0x186	; 0x186 <__funcs_on_exit>
 16c:	0e 94 c2 00 	call	0x184	; 0x184 <_fini>
 170:	ce 01       	movw	r24, r28
 172:	0e 94 c4 00 	call	0x188	; 0x188 <__simulator_exit>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 c0 00 	call	0x180	; 0x180 <_Exit>

Disassembly of section .text._Exit:

00000180 <_Exit>:
 180:	0e 94 56 00 	call	0xac	; 0xac <_exit>
